basePath: /v1/
consumes:
- application/json
definitions:
  ResponseError:
    properties:
      message:
        description: The server error message.
        type: string
        x-go-name: Msg
      status:
        description: The https status error.
        format: int64
        type: integer
        x-go-name: Sts
      timestamp:
        description: Time in which the error has occurred.
        format: date-time
        type: string
        x-go-name: TimeStamp
    type: object
    x-go-package: github.com/Mathew-Estafanous/Open-Stage/handler
  accountResponse:
    description: username, etc.
    properties:
      email:
        description: Email associated with the account.
        example: mathew@fake.com
        type: string
        x-go-name: Email
      id:
        description: The account id.
        example: 1234
        format: int64
        type: integer
        x-go-name: Id
      name:
        description: Name of the account holder.
        example: Mathew
        type: string
        x-go-name: Name
      username:
        description: The account username.
        example: MatMat2
        type: string
        x-go-name: Username
    title: AccountResp represents a user's account information like name,
    type: object
    x-go-name: AccountResp
    x-go-package: github.com/Mathew-Estafanous/Open-Stage/handler
  authToken:
    description: |-
      AuthToken contains both the access and refresh tokens after
      a user has successfully authenticated.
    properties:
      access_token:
        type: string
        x-go-name: AccessToken
      refresh_token:
        type: string
        x-go-name: RefreshToken
    type: object
    x-go-name: AuthToken
    x-go-package: github.com/Mathew-Estafanous/Open-Stage/domain
  createAccount:
    properties:
      email:
        example: mathew@fake.com
        type: string
        x-go-name: Email
      name:
        example: Mathew
        type: string
        x-go-name: Name
      password:
        example: aSecretPassword
        type: string
        x-go-name: Password
      username:
        example: MatMat
        type: string
        x-go-name: Username
    required:
    - name
    - username
    - password
    - email
    title: CreateAccount are the fields that are used to signup a new user account.
    type: object
    x-go-name: CreateAccount
    x-go-package: github.com/Mathew-Estafanous/Open-Stage/handler
  loginAccount:
    properties:
      password:
        description: Password of the account.
        example: aSecretPassword
        type: string
        x-go-name: Password
      username:
        description: Username of the account wanted.
        example: MatMat
        type: string
        x-go-name: Username
    required:
    - username
    - password
    title: Login are the fields that are required to successfully log into an account.
    type: object
    x-go-name: Login
    x-go-package: github.com/Mathew-Estafanous/Open-Stage/handler
  newQuestion:
    properties:
      associated_room:
        description: The room the question was asked in.
        example: conference20
        type: string
        x-go-name: Room
      question:
        description: The question that was asked.
        example: Do you like this API?
        type: string
        x-go-name: Question
      questioner_name:
        default: Anonymous
        description: Name of the questioner.
        example: Mathew
        type: string
        x-go-name: Questioner
    required:
    - question
    - associated_room
    title: NewQuestion represents the request body of new questions.
    type: object
    x-go-name: NewQuestion
    x-go-package: github.com/Mathew-Estafanous/Open-Stage/handler
  question:
    description: |-
      Every question is given an associated room that the question has been
      asked.
    properties:
      associated_room:
        description: The room that the question was asked in.
        example: conference20
        type: string
        x-go-name: AssociatedRoom
      question:
        description: The question that was asked.
        example: What is 2 + 2?
        type: string
        x-go-name: Question
      question_id:
        description: The id for each question
        example: 3452
        format: int64
        type: integer
        x-go-name: QuestionId
      questioner_name:
        description: Name of the questioner.
        example: Anonymous
        type: string
        x-go-name: QuestionerName
      total_likes:
        description: 'The total # of likes for that question.'
        example: 2
        format: int64
        minimum: 0
        type: integer
        x-go-name: TotalLikes
    title: Question represents every question asked within a room.
    type: object
    x-go-name: Question
    x-go-package: github.com/Mathew-Estafanous/Open-Stage/domain
  room:
    description: |-
      Every room contains one main host and a unique room code which
      then contains questions that pertain to the room and whatever
      topic is in discussion.
    properties:
      account_id:
        description: The account that owns the room.
        example: 3434
        format: int64
        type: integer
        x-go-name: AccId
      host:
        description: The host of the room's name.
        example: Mathew
        type: string
        x-go-name: Host
      room_code:
        description: Unique ID for the room.
        example: gopherCon
        type: string
        x-go-name: RoomCode
    required:
    - host
    title: Room models every group Q&A session/room.
    type: object
    x-go-name: Room
    x-go-package: github.com/Mathew-Estafanous/Open-Stage/domain
  updateLikes:
    properties:
      like_increment:
        description: Whether
        example: -1
        format: int64
        type: integer
        x-go-name: LikeIncrement
      question_id:
        description: The ID of the question
        example: 3452
        format: int64
        type: integer
        x-go-name: Id
    required:
    - question_id
    - like_increment
    title: UpdateLike represents the question's new like total.
    type: object
    x-go-name: UpdateLike
    x-go-package: github.com/Mathew-Estafanous/Open-Stage/handler
host: open-stage-platform.herokuapp.com
info:
  contact:
    email: mathewestafanous13@gmail.com
    name: Mathew Estafanous
    url: https://mathewestafanous.com/
  description: |-
    The Open-Stage API is a REST service and is the platform for the
    live Q&A platform open stage. Allowing for the creation of rooms and
    associated questions within those rooms.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Documentation for Open-Stage API
  version: "1.0"
paths:
  /accounts/{accountId}:
    delete:
      description: Will delete the user account with the correlating account 'id.'
      operationId: accountId
      parameters:
      - description: The account ID
        in: path
        name: id
        required: true
        type: string
        x-go-name: ID
      responses:
        "200":
          description: ' OK - Question has been properly deleted.'
        "400":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorResponse'
      summary: Delete an account by ID
      tags:
      - Accounts
  /accounts/login:
    post:
      description: |-
        Uses the provided credentials to authenticate and will return JWT tokens
        if authentication is successful.
      operationId: loginAccount
      parameters:
      - in: body
        name: Body
        schema:
          $ref: '#/definitions/loginAccount'
      responses:
        "200":
          $ref: '#/responses/authToken'
        "401":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorResponse'
      summary: Login and authenticate account.
      tags:
      - Accounts
  /accounts/signup:
    post:
      description: Will create a new account while also ensuring the validity of the
        provided email.
      operationId: createAccount
      parameters:
      - in: body
        name: Body
        schema:
          $ref: '#/definitions/createAccount'
      responses:
        "201":
          $ref: '#/responses/accountResponse'
        "400":
          $ref: '#/responses/errorResponse'
        "409":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorResponse'
      summary: Signup a new user account.
      tags:
      - Accounts
  /questions:
    post:
      description: |-
        Uploads a new question to the room. The questioner's name is optional
        and will be left as "Anonymous" by default.
      operationId: createQuestion
      parameters:
      - in: body
        name: Body
        schema:
          $ref: '#/definitions/newQuestion'
      responses:
        "201":
          $ref: '#/responses/questionResponse'
        "400":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorResponse'
      summary: Create new question in room.
      tags:
      - Questions
    put:
      description: 'Updates the total # of likes for the question with the matching
        question_id.'
      operationId: updateLikes
      parameters:
      - in: body
        name: Body
        schema:
          $ref: '#/definitions/updateLikes'
      responses:
        "200":
          $ref: '#/responses/questionResponse'
        "400":
          $ref: '#/responses/errorResponse'
        "404":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorResponse'
      summary: Update question's total number of likes.
      tags:
      - Questions
  /questions/{questionId}:
    delete:
      description: Uses the given question ID to delete the question with that ID.
      operationId: questionId
      parameters:
      - description: The question's ID
        in: path
        name: question_id
        required: true
        type: string
        x-go-name: ID
      responses:
        "200":
          description: ' OK - Question has been properly deleted.'
        "500":
          $ref: '#/responses/errorResponse'
      summary: Delete a question by ID
      tags:
      - Questions
  /questions/{roomCode}:
    get:
      description: Uses the given room code and retrieves all questions that have
        been posted.
      operationId: roomCode
      parameters:
      - description: The room code that all questions will be retrieved from.
        in: path
        name: roomCode
        required: true
        type: string
        x-go-name: Code
      responses:
        "200":
          $ref: '#/responses/multiQuestionResponse'
        "404":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorResponse'
      summary: Get all questions in a room.
      tags:
      - Questions
  /rooms:
    post:
      description: |-
        Startup a new room with an assigned host. The room code is
        not required and if left empty will be randomly generated. If a code
        is already in use by another room, a 409 Conflict will occur.

        NOTE: This endpoint is secured, so providing the account id is not required.
      operationId: createRoom
      parameters:
      - in: body
        name: Body
        schema:
          $ref: '#/definitions/room'
      responses:
        "201":
          $ref: '#/responses/roomResponse'
        "400":
          $ref: '#/responses/errorResponse'
        "409":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorResponse'
      summary: Create a new room.
      tags:
      - Rooms
  /rooms/{code}:
    delete:
      operationId: delCode
      parameters:
      - description: The unique room code.
        in: path
        name: code
        required: true
        type: string
        x-go-name: Code
      responses:
        "200":
          description: ' OK'
        "500":
          $ref: '#/responses/errorResponse'
      summary: Delete a room by code.
      tags:
      - Rooms
    get:
      description: Simply fetches the room that equals the code that was passed in.
      operationId: getCode
      parameters:
      - description: The unique room code.
        in: path
        name: code
        required: true
        type: string
        x-go-name: Code
      responses:
        "200":
          $ref: '#/responses/roomResponse'
        "404":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorResponse'
      summary: Get room by code.
      tags:
      - Rooms
produces:
- application/json
responses:
  accountResponse:
    description: User Account information
    schema:
      $ref: '#/definitions/accountResponse'
  authToken:
    description: Access tokens from authentication
    schema:
      $ref: '#/definitions/authToken'
  errorResponse:
    description: An http error response.
    schema:
      $ref: '#/definitions/ResponseError'
  multiQuestionResponse:
    description: A list of questions posted within a room.
    schema:
      items:
        $ref: '#/definitions/question'
      type: array
  questionResponse:
    description: A question that has been posted within a room.
    schema:
      $ref: '#/definitions/question'
  roomResponse:
    description: The conference room.
    schema:
      $ref: '#/definitions/room'
schemes:
- https
security:
- jwtAuth: []
securityDefinitions:
  jwtAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
